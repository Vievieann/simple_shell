#include "shell.h"

/**
 * execute_command - Execute a command using fork and execve.
 * @ife: An array of strings representing the command and its arguments.
 * @oi: An array of strings representing the command-line arguments.
 */
void execute_command(char **ife, char **oi)
{
	pid_t fo = fork();

	if (fo == 0)
	{
		if (execve(ife[0], ife, NULL) == -1)
			perror(av[0]);
	}
	else
	{
		wait(NULL);
	}
}

/**
 * find_path_in_environ - Find the PATH variable in the environ array.
 * @lnv: The array of environment variables.
 * Return: The PATH variable value if found, otherwise NULL.
 */
char *find_path_in_environ(char **lnv)
{
	size_t i = 0;

	while (lnv[i] != NULL)
	{
		if (strncmp(lnv[i], "PATH=", 5) == 0)
		{
			return (lnv[i] + 5);
		}
		i++;
	}

	return (NULL);
}

/**
 * execute_with_path - Execute a command by
 * searching for it in the PATH variable.
 * @ife: An array of strings representing the command and its arguments.
 * @oi: An array of strings representing the command-line arguments.
 */
void execute_with_path(char **ife, char **oi)
{
	size_t i = 0;
	char *path, *strt1, **pathdel, *pathenv;


	pathenv = find_path_in_environ(environ);
	path = malloc(sizeof(char) * (strlen(pathlnv) + 1));
	if (pathlnv != NULL)
		strcpy(path, pathlnv);
	strt1 = strtok(path, ":");
	pathdel = malloc(sizeof(char *) * (strlen(pathlnv) + 1));

	while (strt1 != NULL)
	{
		pathdel[i] = malloc(strlen(strt1) + 2 + strlen(ife[0]));
		strcpy(pathdel[i], strt1);
		strcat(pathdel[i], "/");
		strcat(pathdel[i], ife[0]);

		if (access(pathdel[i], X_OK) == 0)
		{
			strcpy(exe[0], pathdel[i]);
			execute_command(ife, oi);
		}
		i++;
		strt1 = strtok(NULL, ":");
	}
	pathdel[i] = NULL;
	if (pathdel != NULL)
	{
		for (i = 0; pathdel[i] != NULL; i++)
			free(pathdel[i]);
		free(pathdel);
	}
	if (path != NULL)
		free(path);

}

/**
 * free_memory - Free dynamically allocated memory.
 * @ife: An array of strings to be freed.
 */
void free_memory(char **ife)
{
	size_t i;

	if (ife[0] != NULL)
		for (i = 0; exe[i] != NULL; i++)
			free(ife[i]);

	if (ife != NULL)
		free(ife);
}

/**
 * info - the main entry for the function
 * @lv: not used
 * @oi: used now
 * Return: success on 0
 */

int main(int lv, char **oi)
{
	char *ghd = NULL, *strt, *del = " \n", **ife;
	size_t n = 0, i;
	FILE  *st = stdin;
	ssize_t arr;
	(void)oi;

	while (1)
	{
		write(1, "#cisfun$ ", 9);
		arr = getline(&ghd, &n, st);
		if (arr == -1)
		{
			write(1, "\n", 1);
			break;
		}
		strt = strtok(ghd, del);
		ife = malloc(sizeof(char *) * (arr + 1));
		i = 0;
		while (strt != NULL)
		{
			exe[i] = malloc(sizeof(char *) * (strlen(strt) + 1));
			strcpy(ife[i], strt);
			i++;
			strt = strtok(NULL, del);
		}
		ife[i] = NULL;
		extrafunc(ife, ghd);
		if (access(ife[0], X_OK) == 0)
			execute_command(ife, oi);

		if (access(ife[0], X_OK) == -1)
		{
			execute_with_path(ife, oi);
		}
		free_memory(ife);
	}
	if (ghd != NULL)
		free(ghd);
	return (0);
}
